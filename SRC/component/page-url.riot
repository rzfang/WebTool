<page-url>
  <page-layout>
    <div class='input-box'>
      <label>
        <input type='checkbox' onchange={EqualToggle}/>
        hide equal rows
      </label>
      <ul>
        <li>
          <input type='text' oninput={UrlsParseAndCompare}/>
        </li>
        <li>
          <input type='text' oninput={UrlsParseAndCompare}/>
        </li>
      </ul>
    </div>
    <table class='output-box'>
      <tbody class={state.HdEql && 'hide-equal'}>
        <tr each={Ky in PrprtyKys} class={state.EqlKys.includes(Ky) && 'is-equal'}>
            <td>{Ky}</td>
            <td each={Url in state.Urls}>{Url[Ky]}</td>
        </tr>
        <tr>
          <td colspan='3'>parsed searchParams</td>
        </tr>
        <tr each={Ky in state.SrchPrmKys} class={state.EqlKys.includes(Ky) && 'is-equal'}>
          <td>{Ky}</td>
          <td each={Url in state.Urls}>{Url && Url.SrchPrmsObjct && Url.SrchPrmsObjct[Ky] || ''}</td>
        </tr>
      </tbody>
    </table>
  </page-layout>
  <style type='scss'>
    :host {
      .input-box {
        >label { cursor: pointer; }

        >ul {
          margin: 0; padding: 0; list-style: none;

          input[type=text] { width: 100%; }
        }
      }

      .output-box {
        width: 100%;

        >tbody {
          >tr {
            &:hover { background-color: #f8f8f8; }

            &.is-equal { color: #808080; }

            >td {
              word-break: break-all;

              &[colspan='3'] { text-align: center; font-size: 1.5rem; }
            }
          }

          &.hide-equal tr.is-equal { display: none; }
        }
      }
    }
  </style>
  <script>
    import pageLayout from './page-layout.riot';

    export default {
      components: { pageLayout },

      PrprtyKys: [
        'origin',
        'username',
        'password',
        'protocol',
        'host',
        'hostname',
        'port',
        'pathname',
        'hash'
      ], // property keys.

      state: {
        EqlKys: [], // equal keys.
        HdEql: false, // hide equal.
        SrchPrmKys: [], // search param keys.
        Urls: [],
      },

      EqualToggle (Evt) {
        this.update({ HdEql: Evt.target.checked });
      },

      // reference - https://developer.mozilla.org/en-US/docs/Web/API/URL_API#examples
      SearchParamsToObject (SrchPrms) {
        SrchPrms.sort();

        const Kys = SrchPrms.keys();

        let Rslt = {};

        for (let Ky of Kys) {
          Rslt[Ky] = SrchPrms.get(Ky);
        }

        return Rslt;
      },

      UrlsParseAndCompare (Evt) {
        const Urls = this.$$('input[type=text]').map(DOM => DOM.value ? new URL(DOM.value) : '');

        let RsltUrls = [ {}, {} ],
            SrchPrmKys = [];

        Urls.forEach((Url, Idx) => {
          if (!Url) { return; }

          this.PrprtyKys.forEach(Ky => { RsltUrls[Idx][Ky] = Urls[Idx][Ky]; });

          RsltUrls[Idx].SrchPrmsObjct = this.SearchParamsToObject(Urls[Idx].searchParams);
          SrchPrmKys = [ ...SrchPrmKys, ...Object.keys(RsltUrls[Idx].SrchPrmsObjct) ];
        });

        SrchPrmKys = SrchPrmKys.filter((Vl, Idx, Arr) => Arr.indexOf(Vl) == Idx);

        let EqlKys = []; // equal keys.

        this.PrprtyKys.forEach(Ky => {
          let IsEql = true;

          for (let i = 1; i < RsltUrls.length; i++) {
            IsEql &= (RsltUrls[i][Ky] === RsltUrls[i - 1][Ky]);
          }

          if (IsEql) { EqlKys.push(Ky); }
        });

        SrchPrmKys.forEach(Ky => {
          let IsEql = true;

          for (let i = 1; i < RsltUrls.length; i++) {
            if (!RsltUrls[i].SrchPrmsObjct || !RsltUrls[i - 1].SrchPrmsObjct) {
              IsEql = false;

              break;
            }

            IsEql &= (RsltUrls[i].SrchPrmsObjct[Ky] === RsltUrls[i - 1].SrchPrmsObjct[Ky]);
          }

          if (IsEql) { EqlKys.push(Ky); }
        })

        this.update({ EqlKys, SrchPrmKys, Urls: RsltUrls });
      }
    }
  </script>
</page-url>