<page-url>
  <page-layout>
    <table class='output-box'>
      <thead>
        <tr>
            <td></td>
            <td><input type='text' oninput={UrlsParseAndCompare}/></td>
            <td><input type='text' oninput={UrlsParseAndCompare}/></td>
        </tr>
      </thead>
      <tbody>
        <tr each={Ky in PrprtyKys}>
            <td>{Ky}</td>
            <td each={Url in state.Urls}>{Url[Ky]}</td>
        </tr>
        <tr>
          <td colspan='3'>parsed searchParams</td>
        </tr>
        <tr each={Ky in state.SrchPrmKys}>
          <td>{Ky}</td>
          <td each={Url in state.Urls}>{Url && Url.SrchPrmsObjct && Url.SrchPrmsObjct[Ky] || ''}</td>
        </tr>
      </tbody>
    </table>
  </page-layout>
  <style type='scss'>
    :host {
      .output-box>tbody>tr {
        &:hover {
          background-color: #f0f0f0;
        }

        >td[colspan='3'] {
          text-align: center;
        }
      }
    }
  </style>
  <script>
    import pageLayout from './page-layout.riot';

    export default {
      components: { pageLayout },

      PrprtyKys: [
        'href',
        'origin',
        'username',
        'password',
        'protocol',
        'host',
        'hostname',
        'port',
        'pathname',
        'search',
        'hash'
      ], // property keys.

      state: {
        SrchPrmKys: [],
        Urls: []
      },

      UrlsParseAndCompare (Evt) {
        const Urls = this.$$('input[type=text]').map(DOM => DOM.value ? new URL(DOM.value) : '');

        let RsltUrls = [ {}, {} ],
            SrchPrmKys = [];

        Urls.forEach((Url, Idx) => {
          if (!Url) { return; }

          this.PrprtyKys.forEach(Ky => { RsltUrls[Idx][Ky] = Urls[Idx][Ky]; });

          RsltUrls[Idx].SrchPrmsObjct = this.SearchParamsToObject(Urls[Idx].searchParams);
          SrchPrmKys = [ ...SrchPrmKys, ...Object.keys(RsltUrls[Idx].SrchPrmsObjct) ];
        });

        SrchPrmKys = SrchPrmKys.filter((Vl, Idx, Arr) => Arr.indexOf(Vl) == Idx);

        this.update({ SrchPrmKys, Urls: RsltUrls });
      },

      // reference - https://developer.mozilla.org/en-US/docs/Web/API/URL_API#examples
      SearchParamsToObject (SrchPrms) {
        SrchPrms.sort();

        const Kys = SrchPrms.keys();

        let Rslt = {};

        for (let Ky of Kys) {
          Rslt[Ky] = SrchPrms.get(Ky);
        }

        return Rslt;
      }
    }
  </script>
</page-url>