<page-datauri>
  <page-layout>
    <div>
      <div>
        <button onclick={DateUpdate}>Now Date</button> or
        <input type='number' id='Mlscd' placeholder='Millisecond'>
        <button onclick={DateUpdate} value='#Mlscd'>Update</button>
      </div><br/>
      <b>Basic Format</b>
      <table>
        <tr><td>Second</td><td id='NowDateScd'></td></tr>
        <tr><td>Local</td><td id='NowDate'></td></tr>
        <tr><td>UTC</td><td id='UTCDate'></td></tr>
      </table><br/>
      <b>Date Object Function Result</b>
      <table id='DftFmt'></table>
    </div>
    <br/><hr/><br/>
    <div>
      <b>Date String ---> Millisecond</b><br/><br/>
      <div id='DtStrBx'>
        <input type='number' maxlength=4 value='2011'/>&nbsp;-
        <input type='number' maxlength=2 value='06'/>&nbsp;-
        <input type='number' maxlength=2 value='27'/>&nbsp;
        <input type='number' maxlength=2 value='03'/>&nbsp;:
        <input type='number' maxlength=2 value='45'/>&nbsp;:
        <input type='number' maxlength=2 value='00'/>&nbsp;.
        <input type='number' maxlength=3 value='000'/>
      </div><br>
      <button onclick={DateToSecond}>Get Second</button>
      <span id="Scd">???</span>
    </div>
  </page-layout>
  <style type='scss'>
    :host {
      table { border-spacing: 0; }
      #DtStrBx > input { max-width: 50px; }
    }
  </style>
  <script>
    import pageLayout from './page-layout.riot';

    export default {
      components: { pageLayout },

      onMounted () {
        if (this.OnBrowser()) {
          setTimeout(this.DateUpdate, 999);
        }
      },

      DateUpdate (Evt) {
        let Mlscd = 0;

        if (Evt && Evt?.target?.value) {
          Mlscd = parseInt(this.$(Evt.target.value).value, 10);
        }

        let Dt = Mlscd ? new Date(Mlscd) : new Date(),
            Scd = Dt.getTime().toString(), // 'Scd' = Second.
            TZOH = Dt.getTimezoneOffset() / 60; // 'TZOH' = Time Zone Offset Hour.

        Scd = Scd.substr(0, Scd.length - 3) + '.' + Scd.substr(Scd.length - 3);
        this.$('#NowDateScd').innerHTML = ': ' + Scd;

        TZOH = (TZOH > 0 ? '-' : '+') + Math.abs(TZOH).toString().padStart(2, '0');

        let DtStr = '';

        DtStr = Dt.getFullYear() + '-' +
                (Dt.getMonth() + 1).toString().padStart(2, '0') + '-' +
                Dt.getDate().toString().padStart(2, '0') + ' ' +
                Dt.getHours().toString().padStart(2, '0') + ':' +
                Dt.getMinutes().toString().padStart(2, '0') + ':' +
                Dt.getSeconds().toString().padStart(2, '0') + '.' +
                Dt.getMilliseconds().toString().padStart(3, '0') +
                ' (' + Dt.getDay() + ') ' +
                TZOH;

        this.$('#NowDate').innerHTML = ': ' + DtStr;

        DtStr = Dt.getUTCFullYear() + '-' +
                (Dt.getUTCMonth() + 1).toString().padStart(2, '0') + '-' +
                Dt.getUTCDate().toString().padStart(2, '0') + ' ' +
                Dt.getUTCHours().toString().padStart(2, '0') + ':' +
                Dt.getUTCMinutes().toString().padStart(2, '0') + ':' +
                Dt.getUTCSeconds().toString().padStart(2, '0') + '.' +
                Dt.getUTCMilliseconds().toString().padStart(3, '0') +
                ' (' + Dt.getUTCDay() + ')';

        this.$('#UTCDate').innerHTML = ': ' + DtStr;

        this.$('#DftFmt').innerHTML =
          '<tr><td>toString</td><td>: ' + Dt.toString() + '</td></tr>' +
          '<tr><td>toDateString</td><td>: ' + Dt.toDateString() + '</td></tr>' +
          '<tr><td>toTimeString</td><td>: ' + Dt.toTimeString() + '</td></tr>' +

          '<tr><td>toLocaleString</td><td>: ' + Dt.toLocaleString() + '</td></tr>' +
          '<tr><td>toLocaleDateString</td><td>: ' + Dt.toLocaleDateString() + '</td></tr>' +
          '<tr><td>toLocaleTimeString</td><td>: ' + Dt.toLocaleTimeString() + '</td></tr>' +

          '<tr><td>toGMTString</td><td>: ' + Dt.toGMTString() + '</td></tr>' +
          '<tr><td>toISOString</td><td>: ' + Dt.toISOString() + '</td></tr>' +
          '<tr><td>toUTCString</td><td>: ' + Dt.toUTCString() + '</td></tr>';
      },

      DateToSecond () {
        let DtA = this.$$('#DtStrBx>*');
        let Dt = new Date(
          DtA[0].value,
          (DtA[1].value - 1),
          DtA[2].value,
          DtA[3].value,
          DtA[4].value,
          DtA[5].value,
          DtA[6].value);

        this.$('#Scd').innerHTML = Dt.getTime() / 1000;
      }
    }
  </script>
</page-datauri>
