<page-ipv426>
  <page-layout>
    IPv4: <input type='text' id='V4Str' maxlength='15' onkeypress={KeyToConvert}/>
    <button id='CvtBtn' onclick={Convert}>Covert</button>
    <hr/>
    History:
    <div id='Hst'>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
    </div>
  </page-layout>
  <style type='scss'>
    :host {
      #Hst > div { margin: 10px 0px; }
    }
  </style>
  <script>
    import pageLayout from './page-layout.riot';

    export default {
      components: { pageLayout },

      RECheck (Ptm, Str) {
        // for chrome, a RegExp is a function.
        if ((typeof Ptm != 'function' && typeof Ptm != 'object' && typeof Ptm != 'string') || typeof Str != 'string')
        { return false; }

        let RE = new RegExp(Ptm);

        return RE.test(Str);
      },

      Convert () {
        let V4 = this.$('#V4Str').value,
            V6 = '0000:0000:0000:0000:0000:0000:';

        if (V4.length === 0 || !this.RECheck(/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/, V4)) {
          alert('Please give a IPv4 string.');

          return 0;
        }

        let V4SA = V4.split('.');

        for (let i in V4SA) {
          if (parseInt(V4SA[i], 10) > 255)
          {
            alert('Please give a IPv4 string.');
            return 0;
          }
        }

        V6 += parseInt(V4SA[0], 10).toString(16).padStart(2, '0') +
              parseInt(V4SA[1], 10).toString(16).padStart(2, '0') + ':' +
              parseInt(V4SA[2], 10).toString(16).padStart(2, '0') +
              parseInt(V4SA[3], 10).toString(16).padStart(2, '0');

        let HstA = this.$$('#Hst > div'),
            RS = V4 + '  ->  ' + V6 + '  ->  ';

        for (let i = HstA.length - 1; i > 0; i--) { HstA[i].textContent = HstA[i - 1].textContent; }

        HstA[0].textContent = RS + V6.replace(/:0+/g, ':').replace(/^0+:/, ':').replace(/:{2,}/, '::');
      },

      KeyToConvert (Evt) {
        if (Evt.keyCode !== 13) { return 0; }

        this.Convert();
      }
    }
  </script>
</page-ipv426>
