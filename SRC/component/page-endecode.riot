<!--
  20111224 by RZ.
  'wrap' attribute in element 'textarea' is not in W3C standard until HTML5 with value 'hard' & 'soft',
  but not all browser support.
  'on' / 'off' is fine for now.
-->
<page-datetime>
  <page-layout>
    <div>
      <div class='Block' style='border: 1px solid; border-radius: 5px;'>
        encodeURI | decodeURI <br/>
        <label>Component : <input id='Cpn' type='checkbox' value='Test' checked='true'/></label><br/>
        <button onclick={URIEnDeCode} data-flag='1'>Encode</button>
        <button onclick={URIEnDeCode} data-flag='0'>Decode</button><br/>
      </div>
      <div class='Block' style='border: 1px solid; border-radius: 5px;'>
        Unicode Encode | Decode<br/>
        <label><input type='radio' name='Md' value={'0'} checked='true'/>XML (&amp;#????;)</label> <!-- reference: http://coderstoolbox.net/string/ -->
        <label><input type='radio' name='Md' value={'1'}/>JSON (\u????)</label><br/>
        <button onclick={UnicodeEnDeCode} data-flag='1'>Encode</button>
        <button style='max-width: 120px;' onclick={UnicodeEnDeCode} data-flag='2'>Encode - HEX</button>
        <button onclick={UnicodeEnDeCode} data-flag='0'>Decode</button><br/>
      </div>
      <div class='Block' style='border: 1px solid; border-radius: 5px;'>
        Base64 Encode | Decode<br/>
        <label>UTF-8 : <input id='UTF8' type='checkbox' value='UTF-8' checked='true'/></label><br/> <!-- reference: Wikipedia: UTF-8, Base64 & http://5566.appspot.com/base64 -->
        <button onclick={Base64EnDeCodeEx} data-flag='1'>Encode</button>
        <button onclick={Base64EnDeCodeEx} data-flag='0'>Decode</button>
        (Beta)<br/>
      </div>
      <div class='Block' style='border: 1px solid; border-radius: 5px;'>
        HTML Special Chars Encode | Decode<br/>
        <button onclick={HTMLSpecialCharsEnDeCode} data-flag='1'>Encode</button>
        <button onclick={HTMLSpecialCharsEnDeCode} data-flag='0'>Decode</button>
      </div>
    </div>
    <div>
      <textarea id='IptTxt' rows='5'></textarea><br/>
      <textarea id='OptTxt' rows='5' readonly='true' wrap='off'></textarea><br/>
      <hr/>
      This is for some string temp putting.<br/>
      <textarea rows='5'></textarea>
    </div>
  </page-layout>
  <style type='scss'>
    :host {
      body { font-size: 16px; font-family: monospace; color: #404040; }
      input { font-size: 16px; max-width: 70px; }
      textarea { margin: 5px 0px; width: 100%; }
      .Title { display: inline-block; min-width: 50px;}
      .Block { display: inline-block; margin-bottom: 10px; padding: 5px; vertical-align: top; white-space: nowrap; }

      body > div:first-child > div.Block { margin: 5px; }
    }
  </style>
  <script>
    import pageLayout from './page-layout.riot';

    export default {
      components: { pageLayout },

      URIEnDeCode (Evt) {
        const Cpn = this.$('#Cpn').checked,
              Flg = parseInt(Evt.target.dataset.flag, 10);

        let Txt = this.$('#IptTxt').value;

        if (Flg === 1) { Txt = Cpn ? encodeURIComponent(Txt) : encodeURI(Txt); }
        else { Txt = Cpn ? decodeURIComponent(Txt) : decodeURI(Txt); }

        this.$('#OptTxt').value = Txt;
      },

      XMLEnDeCode (Flg, Txt) {
        let EDS = ''; // 'EDS' = Encode Decode String.

        if (Flg > 0) {
          for (let i in Txt) {
            let Cd = Txt.charCodeAt(i);

            switch (Cd) {
              case 34: EDS += '&quot;'; break;
              case 38: EDS += '&amp;';  break;
              case 39: EDS += '&apos;'; break;
              case 60: EDS += '&lt;';   break;
              case 62: EDS += '&gt;';   break;
              default: EDS += (Cd < 32 || Cd > 126) ?
                              (Flg === 1 ? ('&#' + Cd + ';') : ('&#x' + Cd.toString(16) + ';')) :
                              Txt.charAt(i);
            }
          }
        }
        else {
          let StrA = Txt.split('&#'); // 'StrA' = String Array.

          for (let i = 0; i < StrA.length; i++) {
            StrA[i] = StrA[i].replace(/&quot;/g, '"').replace(/&amp;/g, '&').replace(/&apos;/g, '\'')
                             .replace(/&lt;/g, '<').replace(/&gt;/g, '>');

            const EndLtr = StrA[i].indexOf(';'); // 'EndLtr' = End Letter.

            if (EndLtr === -1 || StrA[i].substr(0, EndLtr).match(/^x?\d+/) === null) {
              EDS += StrA[i];

              continue;
            }

            const Otr = StrA[i].substr(EndLtr + 1); // 'Otr' = Other string.

            const ChrCd = (StrA[i].charAt(0).toLowerCase() === 'x') ?
                        parseInt(StrA[i].substr(1, EndLtr), 16) :
                        parseInt(StrA[i].substr(0, EndLtr), 10);

            EDS += String.fromCharCode(ChrCd) + Otr;
          }
        }

        return EDS;
      },

      JSONEnDeCode (Flg, Txt) {
        let EDS = ''; // 'EDS' = Encode Decode String.

        if (Flg == 1) {
          Txt = Txt.replace(/\\/g, '\\\\').replace(/\n/g, '\\n');

          for (let i in Txt) {
            const Cd = Txt.charCodeAt(i);

            EDS += (Cd < 32 || Cd > 126) ? ('\\u' + Cd.toString(16)) : Txt.charAt(i);
          }
        }
        else {
          const L = Txt.length;

          for (let i  = 0; i < L; i++) {
            const CSA = [ // 'CSA' = Checked String Array.
              Txt.charAt(i),
              Txt.charAt(i + 1),
              Txt.charAt(i + 2),
              Txt.charAt(i + 3),
              Txt.charAt(i + 4),
              Txt.charAt(i + 5) ];

            if (CSA[0] === '\\' && CSA[1] === 'n') {
              EDS += "\n";
              i += 1;

              continue;
            }

            if (CSA[0] === '\\' && CSA[1] === '\\') {
              EDS += '\\';
              i += 1;

              continue;
            }

            if (CSA[0] === '\\' && CSA[1] === 'u') {
              // for none type reason, using char instead character code to compare. ' ' = 32, '~' = 126
              if (
                CSA[2] < ' ' ||
                CSA[2] > '~' ||
                CSA[2] === '\\' ||
                CSA[3] < ' ' ||
                CSA[3] > '~' ||
                CSA[3] === '\\' ||
                CSA[4] < ' ' ||
                CSA[4] > '~' ||
                CSA[4] === '\\'  ||
                CSA[5] < ' ' ||
                CSA[5] > '~' ||
                CSA[5] === '\\') {
                EDS += '\\u';
                i += 1;

                continue;
              }

              let ChrCd = parseInt((CSA[2] + CSA[3] + CSA[4] + CSA[5]), 16);

              EDS += String.fromCharCode(ChrCd);
              i += 5;

              continue;
            }

            EDS += CSA[0];
          }
        }

        return EDS;
      },

      UnicodeEnDeCode (Evt) {
        const Flg = parseInt(Evt.target.dataset.flag, 10),
              Ipt = this.$$('input[type=radio]'),
              Txt = this.$('#IptTxt').value;

        let Md = 0;

        for (let i in Ipt) {
          if (Ipt[i].checked) {
            Md = parseInt(Ipt[i].value, 10);

            break;
          }
        }

        this.$('#OptTxt').value = (Md === 0) ? this.XMLEnDeCode(Flg, Txt) : this.JSONEnDeCode(Flg, Txt);
      },

      Base64EnDeCodeEx (Evt) {
        const Flg = parseInt(Evt.target.dataset.flag, 10),
              UTF8 = this.$('#UTF8').checked;

        let Txt = this.$('#IptTxt').value;

        Txt = Flg === 1 ? Base64Encode(Txt, UTF8) : Base64Decode(Txt, UTF8);

        this.$('#OptTxt').value = Txt;

        return 0;

        /* Base64 Encode.
          @ UTF8 boolean flag. optional.
          < encode string, or empty string as error. */
        function Base64Encode (Str, UTF8) {
          let KM = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=', // 'KM' = Key Map.
              BS = '', // 'BS' = Binary String.
              PS = '', // 'PS' = Pad String.
              B64S = ''; // 'B64S' = Base64 String.

          if (typeof UTF8 !== 'boolean') { UTF8 = false; }

          for (let i in Str) {
            let TN = Str.charCodeAt(i); // 'TN' = Temp unicode Number.

            BS += (UTF8 ? Uni2UTF8(TN) : TN.toString(2).padStart(16, '0'));
          }

          let PN = BS.length % 6; // 'PN' = Pad Number.

          if (PN > 0) {
            let TPS = '';

            PN = (6 - PN) / 2;

            while (PN-- > 0) {
              TPS += '00';
              PS += '=';
            }

            BS += TPS;
          }

          let C = BS.length;

          for (let i = 0; i < C; i += 6) {
            let TS = BS.substr(i, 6), // 'TS' = Translate String.
                DN = 0, // 'DN' = Decimal Number.
                DS = ''; // 'DS' = Decimal String.

            if (TS.substr(0, 1) === '1') { DN += 32; }

            if (TS.substr(1, 1) === '1') { DN += 16; }

            if (TS.substr(2, 1) === '1') { DN += 8; }

            if (TS.substr(3, 1) === '1') { DN += 4; }

            if (TS.substr(4, 1) === '1') { DN += 2; }

            if (TS.substr(5, 1) === '1') { DN += 1; }

            B64S += KM.substr(DN, 1);
          }

          B64S += PS;

          return B64S;

          /* convert Unicode number to be UTF-8 number in binary string.
            @ Unicode Number.
            < binary string. */
          function Uni2UTF8 (UN) {
            if (typeof UN !== 'number') { return ''; }

            let BS = UN.toString(2),
                TS = '';

            if (UN < 128) { BS = BS.padStart(8, '0'); }
            else if (UN >= 128 && UN <= 2047) {
              TS = BS.padStart(11, '0');
              BS = '110' + TS.substr(0, 5) + '10' + TS.substr(5);
            }
            else if ((UN >= 2048 && UN <= 55295) || (UN >= 57344 && UN <= 65535)) {
              TS = BS.padStart(16, '0');
              BS = '1110' + TS.substr(0, 4) + '10' + TS.substr(4, 6) + '10' + TS.substr(10, 6);
            }
            else if (UN >= 65536 && UN <= 1114111) {
              TS = BS.padStart(21, '0');
              BS = '11110' + TS.substr(0, 3) + '10' + TS.substr(3, 6) + '10' + TS.substr(9, 6) + '10' + TS.substr(15, 6);
            }

            return BS;
          }
        }

        /* Base64 Decode.
          @ UTF8 boolean flag. optional.
          < encode string, or empty string as error. */
        function Base64Decode (Str, UTF8) {
          let KM = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=', // 'KM' = Key Map.
              BS = ''; // 'BS' = Binary String.

          if (typeof UTF8 !== 'boolean') { UTF8 = false; }

          Str = Str.replace(/=+$/, '');

          let C = Str.length; // 'C' = Count.

          for (let i = 0; i < C; i++) {
            let TBS = KM.indexOf(Str.substr(i, 1)).toString(2).padStart(8, '0');

            BS += TBS.substr(2, 6);
          }

          return UTF8 ? Bin2TxtUTF8(BS) : Bin2Txt(BS);

          function Bin2Txt (BinStr) {
            let RT = '', // 'RT' = Result Text.
                L = BinStr.length; // 'L' = Length.

            for (let i = 0; i < L; i += 16) { RT += String.fromCharCode(parseInt(BinStr.substr(i, 16), 2)); }

            return RT;
          }

          function Bin2TxtUTF8 (BinStr) {
            let RT = '', // 'RT' = Result Text.
                L = BinStr.length; // 'L' = Length.

            for (let i = 0; i < L; i += 8) {
              let TBS = BinStr.substr(i, 8); // 'TBS' = Temp Binary String.

              if (TBS.substr(0, 1) === '0') {
                let TN = parseInt(TBS, 2); // 'TN' = Text Number.

                if (TN > 0)
                { RT += String.fromCharCode(TN); }
              }
              else if (TBS.substr(0, 5) === '11110') { // 4 byte.
                TBS = BinStr.substr(i + 5, 3) + BinStr.substr(i + 10, 6) + BinStr.substr(i + 18, 6) + BinStr.substr(i + 26, 6);
                RT += String.fromCharCode(parseInt(TBS, 2));
                i += 24;
              }
              else if (TBS.substr(0, 4) === '1110') { // 3 byte.
                TBS = BinStr.substr(i + 4, 4) + BinStr.substr(i + 10, 6) + BinStr.substr(i + 18, 6);
                RT += String.fromCharCode(parseInt(TBS, 2));
                i += 16;
              }
              else if (TBS.substr(0, 3) === '110') { // 2 byte.
                TBS = BinStr.substr(i + 3, 5) + BinStr.substr(i + 10, 6);
                RT += String.fromCharCode(parseInt(TBS, 2));
                i += 8;
              }
            }

            return RT;
          }
        }
      },

      HTMLSpecialCharsEnDeCode (Evt) {
        const Flg = parseInt(Evt.target.dataset.flag, 10);

        let Txt = this.$('#IptTxt').value;

        Txt = Flg === 1 ? HTMLSpecialCharsEncode(Txt) : HTMLSpecialCharsDecode(Txt);

        this.$('#OptTxt').value = Txt;

        return 0;

        function HTMLSpecialCharsEncode (Txt) {
          return Txt
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#039;');

        }

        function HTMLSpecialCharsDecode (Txt) {
          return Txt
            .replace(/&amp;/g, '&')
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&quot;/g, '"')
            .replace(/&#0?39;/g, '\'');
        }
      }
    }
  </script>
</page-datetime>
